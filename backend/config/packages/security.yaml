security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  enable_authenticator_manager: true
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    App\Entity\User:
      algorithm: auto
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    users:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    login:
      pattern: ^/api/login
      stateless: true
      provider: users
      json_login:
        username_path: email
        check_path: /api/login
        # success_handler: lexik_jwt_authentication.handler.authentication_success
        # failure_handler: lexik_jwt_authentication.handler.authentication_failure

      #custom_authenticator: App\Security\AuthAuthenticator
      # where to redirect after logout
      # target: app_any_route
      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true
    api:
      stateless: true
      pattern: ^/api
      # stateless: true
      jwt: ~

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  role_hierarchy:
    ROLE_VISITOR: [ROLE_VISITOR, IS_AUTHENTICATED_FULLY]
    ROLE_TESTOR: [ROLE_TESTOR, ROLE_VISITOR, IS_AUTHENTICATED_FULLY]
    ROLE_ADMIN: [ROLE_ADMIN ROLE_TESTOR, IS_AUTHENTICATED_FULLY]

  access_control:
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/register, roles: PUBLIC_ACCESS }
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
    # - { path: ^/api/admin, roles:  ROLE_ADMIN }
    - { path: '^/admin', roles: ROLE_ADMIN }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
